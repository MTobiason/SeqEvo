// SeqEvo default parameters file - MT 2019/04/01
// All lines begining with a "//" are noted as comments, and ignored by the program
// To import parameter values, remove the "//" and replace the default value with the desired value.

// ****************
// Input File Paths
// ****************

DIFilePath = in.domains.txt	// Input file containing the domain information
SIFilePath = in.strands.txt	// Input file containing the strand information

// ******************************
// Evolutionary Search Parameters
// ******************************

// ------------------
// Algorithm Duration 
// ------------------

cpl = 10000	// integer > 0 :: Cycles-Per-Lineage :: Number of Sub-Cycles to include in each Lineage.

// -------------------
// Aglorithm Structure
// -------------------

//sflm = false	// true or false :: Shuffle-First-Lineage-Mother :: False -> Lineage #1 starts as a clone of Gen 0. True -> Lineage #1 is randomly shuffled.
//solm = true 	// true or false :: Shuffle-Other-Lineage-Mothers :: False -> All lineages other than #1 start as a clone of generation 0. True -> All lineages other than #1 are radomly shuffled.
//nl = 8		// integer > 0 :: Number of 1st generation Mothers to spawn from generation 0.
//gpc = 1	// integer > 0 :: Generations-Per-Cycle :: Generations per each "Cycle"
//nmpc = 2	// integer > 0 :: Mother-Per-Cycle :: Number of mothers in each Cycle.
//mpm = 1	// integer > 0 :: Mutations-Per-Mother :: Number of times the first generation in a cycle is mutated.
//ndpm = 1	// integer > 0 :: Daughters-Per-Mother :: Number of daughters spawned from each mother.
//mpd = 1	// integer > 0 :: Mutations-Per-Daughter :: Number of times a mother is mutated to make a daughter.
//MaxShuffleAttempts = 1000 	// integer > 0 :: Maximum number of failed (invalid) attempts to shuffle the first lineage mothers before terminating the algorithm.
//MaxTranspositionAttempts = 1000 // integer > 0 :: Maximum number of failed (invalid) attempts to Transpose a mother design before printing a warning and continueing.
//MaxMutationAttempts = 1000 	// integer > 0 :: Maximum number of failed (invalid) attempts to mutate a daughter design before printing a warning and continueing.

// ------------------
// Scoring Parameters
// ------------------

//IntramolecularSLC = 2 	// integer >= 1 :: Complements within a single strand with length greather than or equal to this SLC contribute to a design's score.
//IntermolecularSLC = 2	// integer >= 1 :: Complements between 2 strands with length greather than or equal to this SLC contribute to a design's score.
IntramolecularW = 1 // integer > 0 :: weighting factor for compliments between a given strand and itself
//IntermolecularW = 1	// integer > 0 :: weighting factor for compliments between two given strands
AASLC = 6	// integer >= 1 :: Any stretch of consecutive A's greater than AASLC will flag a design/mutation as invalid. 
CCSLC = 3 	// integer >= 1 :: Any stretch of consecutive C's greater than CCSLC will flag a design/mutation as invalid. 
GGSLC = 3	// integer >= 1 :: Any stretch of consecutive G's greater than GGSLC will flag a design/mutation as invalid. 
TTSLC = 6	// integer >= 1 :: Any stretch of consecutive T's greater than TTSLC will flag a design/mutation as invalid. 

// *****************
// Output File Paths
// *****************

eflm = true

//ROFilePath = se.out.report.txt	// File to create which will contain the program's full report
//DOFilePath = se.out.domains.txt	// File to create which will contain the output domain information
//SOFilePath = se.out.strands.txt	// File to create which will contain the output strand information
//NOFilePath = se.out.network.txt	// File to create which will contain just the strand and domain sequence information.
IOFilePath = se.out.interference.txt // File to create which will contain the # of unique interference structures found in the best/final design.

// --------------------
// Trajectory Exporting
// --------------------

//CycleReporting = false	// true|false :: Create a file to store score as a function of cyles?
//CTOFilePath = se.out.cycle-trajectories.csv	// File to create which will store score as a function of cycles.
//LogCycleReporting = true			// true|false :: Create a file to store score as a function of cycles distributed logarithmically?
//LCTOFilePath =se.out.log-cycle-trajectories.csv // File to create which will store score as a function of cycle for logarithmically distributed values
GenerationReporting = true // true|false :: Create a file to store score as a function of generation?
GTOFilePath = se.out.gen-trajectories.csv	// File to create which will store score as a function of generation.